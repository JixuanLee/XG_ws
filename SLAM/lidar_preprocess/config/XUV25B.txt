#所有节点的数据都需要写到这个文件中
#点云预处理节点
#车体坐标系原点暂定车体中央位置
ground_remove_and_point_concat:
  filter_z_min: -1
  filter_z_max: 3
  min_dist: 0.2 #过近点滤除阈值
  leaf_size: 0.2 #降采样参数
  cell_size: 0.15 #栅格尺寸，越小则栅格数量越多，精准但耗算力//0.22
  z_threshold: 3.0 #点云高度上限，滤除过高点阈值
  y_threshold: 1.10 #1/2的车身Y方向尺度（车宽，左右向）//1.0//2.0车胎外侧不含雷达
  x_threshold: 1.60 #1/2的车身X方向尺度（车长，前后向）//1.6//3.2车胎外侧含雷达
  ground_remove_threshold: 0.3 #同一xy处z的跳变阈值，小于此则为地面点
  ground_z: -1.50 #地面大概高度（XUV25B：最低平台离地1.00m，middle雷达距平台0.50m）
  ground_beyond_threshold: 0.35 #这个值+地面大概高度以上的点肯定被考虑为非地面点

  middle_lidar_sub_topic: /rslidar_points_32
  front_lidar_sub_topic: /rslidar_points_16A
  left_lidar_sub_topic: /rslidar_points_16B
  right_lidar_sub_topic: /rslidar_points_16C

  T_middle2veh:  #32
  [	1,  		0, 		0,  		0,
  	0,  		1., 		0.,  		0,
  	0,  		0.,  		1.,  		0,
  	0.,  		0.,  		0.,  		1.	]
#16A: deg-> X0 Y45 Z23 
  T_front2middle:  #16A
  [     0.650895,       -0.276289,      0.707107,       2.210000,
        0.390731,       0.920505,       -0.000000,      0.000000,
        -0.650895,      0.276289,       0.707107,       -0.500000,
        0.000000,       0.000000,       0.000000,       1.000000]
#16B: deg-> X-45 Y0 Z-90   X轴正方向为车头方向（雷达左侧）
  T_left2middle:  #16B  225
  [     0.000000,       1.000000,       0.000000,       1.4250000,
        -0.707107,      0.000000,       0.707107,       1.00000,
        0.707107,       -0.000000,      0.707107,       -0.500000,
        0.000000,       0.000000,       0.000000,       1.000000]
#16C: deg-> X45 Y0 Z90   X轴正方向为车头方向（雷达左侧）
  T_right2middle:  #16C
  [     0.000000,       -1.000000,      0.000000,       1.4250000,
        0.707107,       0.000000,       -0.707107,      -1.000000,
        0.707107,       0.000000,       0.707107,       -0.500000,
        0.000000,       0.000000,       0.000000,       1.000000]

#  T_不变:
#  [	1,  		0, 		0,  		0,
#  	0,  		1., 		0.,  		0,
#  	0,  		0.,  		1.,  		0,
#  	0.,  		0.,  		0.,  		1.	]


#  RVIZ:X是红色轴（激光雷达正前方为正），Y是绿色轴（激光雷达侧方，右手坐标系），Z是蓝色轴（激光雷达向上为正，右手坐标系）
#  T_沿X旋转x°，沿Y旋转y，沿Z旋转z，沿X平移a，沿Y平移b，沿Z平移c，总体缩放k:
#  [	k*cosy*cosz,  				-k*cosy*sinz, 				k*siny,  		a,
#  	k*(sinx*siny*cosz+cosx*sinz),  		k*(cosx*cosz-sinx*siny*sinz), 		-k*sinx*cosy,  		b,
#  	k*(sinx*sinz-cosx*siny*cosz),  		k(cosx*siny*sinz+sinx*cosz),  		k*cosx*cosy,  		c,
#  	0.,  					0.,  					0.,  			1.	]


#  上述变换矩阵T确定方式：
#  找到父坐标系（目标坐标系）记作F，找到子坐标系（原始坐标系）记作C，例如 rightLiDAR->middleLiDAR ： C->F。
#  旋转角度及坐标轴确定：C沿着F的哪个轴旋转可与F重合，就调整转换矩阵T的哪个轴的旋转参数；
#			C沿着这个轴旋转多少度，就取相反数作为旋转的数值；
#  平移角度及坐标轴确定：C沿着F的哪个轴平移可与F重合，就调整转换矩阵T的哪个轴的平移参数；
#			C沿着这个轴平移多少米，就取相反数作为平移的数值。

#  将角度/距离数据送入现有cpp程序包calculate即可计算得到T，也可手算T。


